package generate

import (
	"errors"
	"io/ioutil"
	"os"
	"strings"

	gen "github.com/dave/jennifer/jen"
	"github.com/golang/glog"
	"github.com/magicsong/generate-go-for-sonarqube/pkg/api"
	"github.com/magicsong/generate-go-for-sonarqube/pkg/util/strcase"
)

var (
	DeprecatedWords           = []string{"removed", "deprecated"}
	validation      *gen.File = gen.NewFile(PackageName)
	WorkingDir                = "."
)

const (
	PackageName string = "sonarqube"
)

func init() {
	validation.HeaderComment("[TODO] Code generated by \"github.com/magicsong/generate-go-for-sonarqube\", you should edit some validation logic here")
	validation.ImportName("github.com/magicsong/generate-go-for-sonarqube/pkg/validation", "valiation")
}
func Build(workingDir string, apidoc *api.API) error {
	WorkingDir = workingDir
	_ = os.Mkdir(workingDir, os.ModeDir)
	err := AddStaticFile()
	if err != nil {
		glog.Errorln("Import static files failed")
		return err
	}
	for _, item := range apidoc.WebServices {
		name := item.Path[4:]
		contin := false
		for _, word := range DeprecatedWords {
			if strings.Contains(strings.ToLower(item.Description), word) {
				glog.V(0).Infof("Detected deprecated api:%s,source:%s\n", item.Path, item.Description)
				contin = true
				break
			}
		}
		if contin {
			continue
		}
		newFile, err := os.Create(workingDir + "/" + name + "_service.go")
		glog.V(3).Infof("Creaing go file %s", newFile.Name())
		if err != nil {
			return err
		}
		defer newFile.Close()
		f, err := GenerateGoContent("sonarqube", &item)
		if err != nil {
			return err
		}
		err = f.Render(newFile)
		if err != nil {
			return err
		}
	}
	//Write validation file
	return validation.Save(WorkingDir + "/validation.go")
}

func AddStaticFile() error {
	err := ioutil.WriteFile(WorkingDir+"/sonarqube.go", []byte(SonarqubeConst), 0644)
	if err != nil {
		return err
	}
	return ioutil.WriteFile(WorkingDir+"/web_client.go", []byte(WebClientConst), 0644)
}

func GenerateGoContent(packageName string, service *api.WebService) (f *gen.File, err error) {
	if service == nil {
		return nil, errors.New("service must not be nil")
	}
	if packageName == "" {
		return nil, errors.New("package name is illegal")
	}
	f = gen.NewFile(packageName)
	f.CanonicalPath = "github.com/magicsong/generate-go-for-sonarqube/pkg/" + PackageName
	f.PackageComment(service.Description)
	f.ImportName("github.com/google/glog", "glog")

	name := service.Path[4:]
	//Create Service Struct
	f.Type().Id(strings.Title(name) + "Service").Struct(
		gen.Id("client").Op("*").Id("Client"),
	).Line()

	//Create Methods
	for _, item := range service.Actions {
		f.Add(GenerateServiceActionContent(name, &item))
	}
	return
}

//GenerateServiceActionContent generate code of each service,include api method and related structs
func GenerateServiceActionContent(serviceName string, action *api.Action) *gen.Statement {
	c := gen.Line()
	optionName := strcase.ToCamel(serviceName + action.Key + "Option")
	c.Type().Id(optionName).StructFunc(func(g *gen.Group) {
		for _, field := range action.Params {
			if strings.Contains(strings.ToLower(field.Description), "deprecated") {
				glog.V(0).Infof("Detected deprecated field <%s> in <action>:%s,description:%s\n", field.Key, action.Key, field.Description)
				continue
			}
			g.Id(strcase.ToCamel(field.Key)).String().Commentf("Description:\"%s\",ExampleValue:\"%s\"", field.Description, field.ExampleValue)
		}
	}).Line()

	//create valid method
	validation.Func().Params(gen.Id("s").Op("*").Id(strings.Title(serviceName) + "Service")).Id("Validate" + strcase.ToCamel(action.Key) + "Opt").Params(
		gen.Id("opt").Op("*").Id(optionName)).Params(gen.Op("*").Qual("github.com/magicsong/generate-go-for-sonarqube/pkg/validation", "Error")).Block(
		gen.Return(gen.Nil()),
	)
	//create method
	method := "GET"
	if action.Post {
		method = "POST"
	}
	c.Commentf("%s %s", strings.Title(action.Key), action.Description).Line()
	c.Func().Params(gen.Id("s").Op("*").Id(strings.Title(serviceName)+"Service")).Id(strings.Title(action.Key)).Params(
		gen.Id("opt").Op("*").Id(optionName)).Params(
		gen.Id("Resp").Op("*").Interface(), gen.Err().Error()).BlockFunc(func(g *gen.Group) {
		g.Err().Op(":=").Id("s").Dot("Validate" + strings.Title(action.Key) + "Opt").Call(gen.Id("opt"))
		ErrorHandlerHelper(g)
		g.List(gen.Id("req"), gen.Id("err")).Op(":=").Id("s").Dot("client").Dot("NewRequest").Call(gen.Lit(method), gen.Lit(serviceName+"/"+action.Key), gen.Id("Opt"))
		ErrorHandlerHelper(g)
		g.Err().Op("=").Id("s").Dot("client").Dot("Do").Call(gen.Id("req"), gen.Id("Resp"))
		ErrorHandlerHelper(g)
		g.Return()
	})
	return c
}

func ErrorHandlerHelper(g *gen.Group) {
	g.If(
		gen.Err().Op("!=").Nil(),
	).Block(
		gen.Return(),
	)
}
